#!/bin/bash
#
# Copyright (c) 2012-2016 EMC Corporation
# All Rights Reserved
#
# This software contains the intellectual property of EMC Corporation
# or is licensed to EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of EMC.
#
VERSION=1.0.2
# 
# 1.0.1 - added automatic IP address detection, container/file checking, and
#         timeout to curl (so script doesn't hang indefinitely in case of response
#         hangs)
#         Adding logic to automatically detect IP adds 2.2.0 compatibility

# please double check docker name before run it.

Usage()
{
	echo "Version: $VERSION"
    echo 'Usage: setLoadBalanceEnabled enable/disable [configonly]'
    exit 1
}

[ $# -lt 1 -o $# -gt 2 ] && Usage
[ $# -ge 1 -a "$1" != 'enable' -a "$1" != 'disable' ] && Usage
[ $# -gt 1 -a "$2" != 'configonly' ] && Usage
date

dtquery_port=9101

lbflag='true'
errorflag='false'
cfgfile="/opt/storageos/conf/common.object.properties"
release=""

get_dtquery_interface()
{
	# Returns the IP of the interface being used to listen for dtquery (port 9101)
	# requests.  Exits with fatal error if no IP found.

	IP=$(netstat -an | grep $dtquery_port | grep LISTEN | awk '{ print $4 }' | awk -F: '{ print $1 }')
	
	if [[ "$IP" =~ ^([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})$ ]]; then
		echo "dtquery is listening on IP $IP"
	else
		echo "ERROR:  Unable to determine dtquery listener IP.  dtquery is not running"
 		echo "  or an unexpected error occurred.  Exiting."
		exit 100
	fi
}

do_curl_command()
{
	value="$1"
	url="$2"
	errorflag='false'

	curl -sS --max-time 30 --retry 3 --retry-delay 3 -w "$value"'\n' -f "http://${IP}:${dtquery_port}${url}$lbflag" || errorflag='true'

	if [[ "$errorflag" == "true" ]]; then
		echo "ERROR:  Curl command failed.  Exiting."
		echo "Command was:  curl -sS --max-time 180 --retry 3 --retry-delay 3 -w '${value}\\n' -f \"http://${IP}:${dtquery_port}${url}$lbflag\""
		exit 101
	fi

}



### Main logic


# Check whether the object config file we'll be updating exists

if [[ ! -f "$cfgfile" ]]; then
	echo "ERROR: Could not find config file: '$cfgfile' does not exist."
	echo "  Ensure that this script is being run from inside the object-main"
	echo "  container of the node."
	exit 102
fi


get_dtquery_interface

if [ "$1" != 'enable' ]; then
    lbflag='false'
    sed -i s/object.LbEnabled=true/object.LbEnabled=false/g /opt/storageos/conf/common.object.properties || errorflag='true'
else
    sed -i s/object.LbEnabled=false/object.LbEnabled=true/g /opt/storageos/conf/common.object.properties || errorflag='true'
fi

if [ "$2" != 'configonly' ]; then

do_curl_command "blobsvc lb switch done" "/ownership/lbswitch/blob/"
do_curl_command "cm lb switch done" "/ownership/lbswitch/cm/"
do_curl_command "eventsvc lb switch done" "/ownership/lbswitch/event/"
do_curl_command "metering lb switch done" "/ownership/lbswitch/metering/"
do_curl_command "rm lb switch done" "/ownership/lbswitch/rm/"
do_curl_command "resourcesvc lb switch done" "/ownership/lbswitch/resource/"
do_curl_command "ssm lb switch done" "/ownership/lbswitch/ssm/"

fi

echo "SET LOAD BALANCE ENABLED TO "$lbflag" SUCCEEDED!!"

exit 0
